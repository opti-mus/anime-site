let anime = [
  {
    title: 'Naruto',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'Onepunchman',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'Solo leveling',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'Boruto',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'One Peace',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'Bleach',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'Hunter x Hunter',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
  {
    title: 'God tower',
    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',
    year: 1997,
    type: 'serial',
    series: 220,
    genres: [],
  },
]
let animeNews = [
  {
    title: 'С 12 апреля сайт снова заблокировали в РФ (обн. 15.04)',
    date: '13 Мая',
  },
  { title: 'Блокировка сайта в Казахстане (обновлено 16.04)', date: '12 Апр' },
  { title: 'Запреты аниме (только) в РФ (обновлено 17.05)', date: '12 Мар' },
  { title: 'Семь универсальных сюжетов ч.2', date: '3 Мар' },
  { title: 'Семь универсальных сюжетов ч.1', date: '1 Мар' },
  { title: 'Студия «Ghibli»', date: '23 Фев' },
]
let animeAdt = {
  title: 'Фантастический мир с обращённым в красавицу мужчиной и…',
  date: '10 Мая',
  genres: ['Комедия', 'Романтика', 'Приключения', 'Фантастика'],
}
let animeLastUpdate = {
  title: 'Король бойцов: на другой день',
  year: '2005',
  type: 'ONA',
  series: '4',
  genres: ['Сёнэн', 'Драма', 'Приключения'],
  ageRating: 'PG-13(от 13 лет)',
}
let an = {
  title: 'Тетрадь смерти',
  views: '7 096 408',
  year: 2006,
  ageRating: 'R-17+',
  genres: [
    'Сёнэн',
    'Детектив',
    'Драма',
    'Мистика',
    'Триллер',
    'Демоны',
    'Сверхъестественное',
  ],
  type: 'Сериал',
  series: 37,
  img: 'img/1564936827.jpg',
  desc: 'Уставший от ухудшающегося мира и от немногословиях своих собратьев, синигами Рюук отправляет на Землю Тетрадь Смерти, наблюдая за тем, что же интересное из этого получится. Его план начинает исполняться, когда Тетрадь Смерти поднимает гениальный ученик старшей школы Лайт Ягами, которому так же наскучил окружающий его мир. Изначально Лайт рассматривал рукопись как чью-то неудавшуюся шутку, но вскоре, экспериментальным путем Лайт открывает правду, написанную в Тетради Смерти. Нужно всего лишь создать изображение человека у себя в уме в тот момент, когда он пишет его имя в Тетради Смерти, и тогда, этот человек умрет через 40 секунд от сердечного приступа. Вооружившись такой невиданной силой, Лайт становится неуловимым убийцей, и он решает сделать этот мир лучше, истребляя криминальных авторитетов и преступников с помощью Тетради Смерти. Вскоре, в интернете и СМИ появляются новости о таинственном "Кира", который пытается играть в бога.За расследование серии странных убийств, берется загадочный детектив L, который сделает все чтобы остановить Киру. Лайт старается сделать все, что от него зависит, ради того чтобы люди не раскрыли его личность, даже если это будет означать убийство невинных, которые могут помочь расследованию. ',
}
export class Content {
  static getData(req) {
    return fetch(
      `https://anime-sitee-default-rtdb.firebaseio.com/${req}.json`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'aplication/json',
        },
      }
    )
      .then((res) => res.json())
      .then(validData)
  }
  static getAnime(id) {
    return fetch(
      `https://anime-sitee-default-rtdb.firebaseio.com/animes/${id}.json`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'aplication/json',
        },
      }
    ).then((res) => res.json())
  }
  static setAnime(data, req) {
    return fetch(
      `https://anime-sitee-default-rtdb.firebaseio.com/${req}.json`,
      {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'aplication/json',
        },
      }
    )
      .then((res) => res.json())
      .then((body) => console.log(body))
  }
}
function validData(data) {
  return data ? Object.keys(data).map((el) => ({ ...data[el], id: el })) : []
}
// Content.setAnime(an, 'animes')
// Неиспользуемые ф-ии
function timeConverter(timestamp) {
  let a = new Date(timestamp * 1)
  const months = [
    'Янв',
    'Фев',
    'Мар',
    'Апр',
    'Мая',
    'Июн',
    'Июл',
    'Авг',
    'Сен',
    'Окт',
    'Ноя',
    'Дек',
  ]
  let year = a.getFullYear()
  let month = months[a.getMonth()]
  let date = a.getDate()
  let hour = a.getHours()
  let min = a.getMinutes()
  let sec = a.getSeconds()

  let time = {
    year,
    month,
    date,
    hour,
    min,
    sec,
    get getDate() {
      return `${this.date} ${this.month}`
    },
  }

  return time
}
function createValidObj(data) {
  let obj = {}
  data.forEach((el) => {
    let fild = el.id
    for (let key in data) {
      if (data[key].id == fild) {
        obj[fild] = Object.keys(el)
          .filter((i) => i !== 'id')
          .map((item) => el[item])
          .join('')
      }
    }
  })
  return obj
}
